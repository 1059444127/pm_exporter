//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pm_mssql_exporter.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("mssql_monitoring")]
        public string JobName {
            get {
                return ((string)(this["JobName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("auto")]
        public string InstanceName {
            get {
                return ((string)(this["InstanceName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsEnabledPusher {
            get {
                return ((bool)(this["IsEnabledPusher"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://localhost:9091/metrics")]
        public string PushGatewayUri {
            get {
                return ((string)(this["PushGatewayUri"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int PushIntervalSec {
            get {
                return ((int)(this["PushIntervalSec"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsEnabledServer {
            get {
                return ((bool)(this["IsEnabledServer"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://localhost:7000/")]
        public string ServerUri {
            get {
                return ((string)(this["ServerUri"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
        [global::System.Configuration.DefaultSettingValueAttribute("Server=SRV-4\\EX2014_KP;Database=master;Trusted_Connection=True;")]
        public string ConnStr {
            get {
                return ((string)(this["ConnStr"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsEnabledConnectionInfo {
            get {
                return ((bool)(this["IsEnabledConnectionInfo"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsEnableOsPerfCounters {
            get {
                return ((bool)(this["IsEnableOsPerfCounters"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>gauge  ; mssql_table_lock_escalations_per_sec ; Table Lock Escalations/sec  ;          ;</string>
  <string>gauge  ; mssql_buffer_cache_hit_ratio         ; Buffer cache hit ratio      ;          ;</string>
  <string>gauge  ; mssql_average_latch_wait_time_ms     ; Average Latch Wait Time (ms);          ;</string>
  <string>counter; mssql_activation_errors_total        ; Activation Errors Total     ;          ;</string>
  <string>gauge  ; mssql_average_wait_time_ms           ; Average Wait Time (ms)      ; _Total   ;</string>
  <string>gauge  ; mssql_lock_timeouts_per_sec          ; Lock Timeouts/sec           ; _Total   ;</string>
  <string>gauge  ; mssql_lock_wait_time_ms              ; Lock Wait Time (ms)         ; _Total   ;</string>
  <string>gauge  ; mssql_number_of_deadlocks_per_sec    ; Number of Deadlocks/sec     ; _Total   ;</string>
  <string>gauge  ; mssql_cache_hit_ratio                ; Cache Hit Ratio             ; _Total   ;   Plan Cache </string>
  <string>gauge  ; mssql_transactions_per_sec           ; Transactions/sec            ; _Total   ;</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection OsPerformanceCounters {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["OsPerformanceCounters"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool IsEnableCustomMetrics {
            get {
                return ((bool)(this["IsEnableCustomMetrics"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfCustomMetricSett xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <CustomMetricSett Type=""gauge"" Name=""mssql_transas_log_book_insert"" IsEnabled=""true"">
    <Help>row count of vtsdb.dbo.LogBook</Help>
    <Sql>select count(*) as cn from  vtsdb.dbo.logbook</Sql>
  </CustomMetricSett>
  <CustomMetricSett Type=""gauge"" Name=""mssql_vtsdb2_active"" IsEnabled=""true"">
    <Help>vessel by zone and receipt type</Help>
    <Sql>
                                select z.RZoneVTS_Prefix, t.ReceiptType_Code, count(*) as cn
                                from vtsdb2.nav.receiptActive as a
                                join vtsdb2.nav.Receipt as r on r.Receipt_GUID = a.Receipt_GUID
                                join vtsdb2.nsi.ReceiptType as t on t.ReceiptType_GUID = r.ReceiptType_GUID
                                join vtsdb2.nsi.ResponsZoneVTS as z on z.ResponsZoneVTS_GUID = a.ResponsZoneVTS_GUID
                                group by z.RZoneVTS_Prefix, t.ReceiptType_Code
                            </Sql>
  </CustomMetricSett>
</ArrayOfCustomMetricSett>")]
        public global::Pm.MsSql.CustomMetricSettList CustomMetrics {
            get {
                return ((global::Pm.MsSql.CustomMetricSettList)(this["CustomMetrics"]));
            }
        }
    }
}
